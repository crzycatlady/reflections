How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It helped me resolve the issue right away and I wouldn't of spent hours looking for a bug.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    It would helped me narrow down what lines of code changed, what files, it will help in not only debugging code but also code reviews.
	I can revert back to older versions if the new code does not work. If a certain version of code is deployed, I can debug that specific 
	version and not have to worry about interupting newer development.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    The pros of manually committing are you have more flexibility of saving your code and you don't clutter the repository with too many commits.
	The cons are you can lose your work if your system goes down and it is prone to user errors.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    It seems that Google Docs is meant for docuements like Word or Excel while Git is meant more for development.

How can you use the commands git log and git diff to view the history of files?

    git log gives me the history of the commits and git diff gives me what changed between two commits.

How might using version control make you more confident to make changes that
could break something?

    Version control helps narrow down the error but with the use of a branch you can work on fixing the bug without interfering with the master
	and potentially fix the bug with hopefully not introducing any new ones.

Now that you have your workspace set up, what do you want to try using Git for?

    Explore all of the capabilities of git 
